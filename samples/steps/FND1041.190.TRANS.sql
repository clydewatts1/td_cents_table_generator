/*
# ===============================================================================
#                      PRIMARK
#
# ===============================================================================
# ===============================================================================
# File Name           : OLR1001.100.TRANS.sql
# Pattern             : 
# Purpose             : Insertion in TRANS table
# Author              : TERADATA
# File Type           : SQL
# Creation Date       : 2025-07-23
# -------------------------------------------------------------------------------
# Change History :
# Ver  | Date        |  Modified By           |  Change Description
# -------------------------------------------------------------------------------
# Automatically generated by 10cents_table_generator
# 1.0  | 2025-07-23 | TERADATA               |  INITIAL CODE
# Build Time 15:46:13
# 1.0  | 2025-07-23 | TERADATA               |  INITIAL CODE
*/


DELETE FROM DW${INSTANCE}T_TMP_ACC_FND.FND1041_TRANS
;

.IF ERRORCODE <> 0 THEN .QUIT 101

INSERT INTO DW${INSTANCE}T_TMP_ACC_FND.FND1041_TRANS
(
    item_sbclas_wid,
    pmk_co_cd,
    pmk_co_vers_num,
    dvisn_cd,
    dvisn_vers_num,
    dept_cd,
    dept_vers_num,
    item_clas_cd,
    item_clas_vers_num,
    pmk_item_sbclas_grp_cd,
    pmk_item_sbclas_grp_vers_num,
    item_sbclas_cd,
    item_sbclas_vers_num
)
-- This query constructs a comprehensive merchant hierarchy for styles, comparing the current
-- hierarchy against a previous version to identify changes and determine new version numbers.
-- It uses set theory concepts (intersections and differences) implemented via SQL window functions.
WITH
-- CTE 1: MHR (Merchant Hierarchy)
-- Flattens the current, active merchant hierarchy by joining dimension tables from company down to subclass.
MHR AS (
    SELECT
        SCLS.item_sbclas_wid,
        CO.pmk_co_cd,
        DVN.dvisn_cd,
        DPT.dept_cd,
        CLS.item_clas_cd,
        SCLS.pmk_item_sbclas_grp_cd,
        SCLS.item_sbclas_cd
    FROM
        DWP01A_IDW.ITEM_SBCLAS AS SCLS
        INNER JOIN DWP01A_IDW.ITEM_CLAS AS CLS ON CLS.item_clas_wid = SCLS.item_clas_wid
        INNER JOIN DWP01A_IDW.DEPT AS DPT ON DPT.dept_wid = CLS.dept_wid
        INNER JOIN DWP01A_IDW.DVISN AS DVN ON DVN.dvisn_wid = DPT.dvisn_wid
        INNER JOIN DWP01A_IDW.PMK_CO AS CO ON CO.pmk_co_wid = DVN.pmk_co_wid
        LEFT OUTER JOIN DWP01A_IDW.PMK_TCTCL_BUYR AS BYR ON DPT.pmk_tctcl_buyr_wid = BYR.pmk_tctcl_buyr_wid AND BYR.cur_flg = 'Y'
    WHERE
        SCLS.cur_flg = 'Y'
        AND CO.cur_flg = 'Y'
        AND DPT.cur_flg = 'Y'
        AND CLS.cur_flg = 'Y'
        AND DVN.cur_flg = 'Y'
),
-- CTE 2: MHR_STYL_BASE (Set B)
-- This represents the CURRENT state of the style hierarchy (Set B).
-- It joins the flattened hierarchy (MHR) to the current style reclassification data.
MHR_STYL_BASE AS (
    SELECT
        STLX.styl_wid,
        STLX.styl_sbclass_vers_num,
        MHR.item_sbclas_wid,
        MHR.pmk_co_cd,
        MHR.dvisn_cd,
        MHR.dept_cd,
        MHR.item_clas_cd,
        MHR.pmk_item_sbclas_grp_cd,
        MHR.item_sbclas_cd
    FROM
        DWT04A_ACC_FND.FND_RECLASFCN_STYL_SBCLASS_XREF AS STLX
        INNER JOIN MHR ON STLX.item_sbclas_wid = MHR.item_sbclas_wid
    WHERE
        STLX.eff_to_dt = DATE '9999-12-31' -- Filter for currently effective records.
),
-- CTE 3: XVER (Set A)
-- This represents the ORIGINAL state of the style hierarchy (Set A).
-- It pulls the versioned hierarchy data from a separate cross-reference table.
XVER AS (
    SELECT
        styl_wid,
        item_sbclas_wid,
        styl_sbclas_vers_num,
        pmk_co_cd,
        pmk_co_vers_num,
        dvisn_cd,
        dvisn_vers_num,
        dept_cd,
        dept_vers_num,
        item_clas_cd,
        item_clas_vers_num,
        pmk_item_sbclas_grp_cd,
        pmk_item_sbclas_grp_vers_num,
        item_sbclas_cd,
        item_sbclas_vers_num
    FROM
        DWT04A_ACC_FND.FND_RECLASFCN_STYL_SBCLASS_VERS_XREF AS XRF
    WHERE
        XRF.eff_to_dt = DATE '3500-12-31' -- Filter for currently effective records in the version history.
),
-- CTE 4: PMK_CO_REF
-- This is the core logic CTE. It performs a FULL OUTER JOIN between the original (A) and current (B)
-- hierarchies to analyze changes. It uses set theory concepts to count items in the intersection and differences.
PMK_CO_REF AS (
    SELECT
        -- Use COALESCE to combine keys from both datasets (A and B).
        COALESCE(MSB.styl_wid, XVER.styl_wid) AS styl_wid,
        COALESCE(MSB.item_sbclas_wid, XVER.item_sbclas_wid) AS item_sbclas_wid,
        -- Merge hierarchy attributes, prioritizing the current hierarchy (MSB).
        COALESCE(MSB.pmk_co_cd, XVER.pmk_co_cd) AS pmk_co_cd,
        COALESCE(MSB.dvisn_cd, XVER.dvisn_cd) AS dvisn_cd,
        COALESCE(MSB.dept_cd, XVER.dept_cd) AS dept_cd,
        COALESCE(MSB.item_clas_cd, XVER.item_clas_cd) AS item_clas_cd, -- Corrected from dept_cd
        COALESCE(MSB.pmk_item_sbclas_grp_cd, XVER.pmk_item_sbclas_grp_cd) AS pmk_item_sbclas_grp_cd, -- Corrected from dept_cd
        COALESCE(MSB.item_sbclas_cd, XVER.item_sbclas_cd) AS item_sbclas_cd, -- Corrected from dept_cd
        MSB.styl_sbclass_vers_num,
        XVER.dept_vers_num,
        -- DEBUGGING COLUMNS: To observe values from both sets.
        MSB.dept_cd AS a_dept_cd,
        XVER.dept_cd AS b_dept_cd,
        -- DEPARTMENT CHANGE ANALYSIS --
        -- AnB (Intersection): Count of styles that are in the same department in both sets.
        SUM(CASE WHEN MSB.dept_cd = XVER.dept_cd THEN 1 ELSE 0 END) OVER (PARTITION BY MSB.dept_cd) AS dept_anb_count,
        MIN(CASE WHEN MSB.dept_cd = XVER.dept_cd THEN XVER.dept_vers_num ELSE NULL END) OVER (PARTITION BY MSB.dept_cd) AS dept_anb_min,
        -- BtoA (Moved Into): Count of styles that moved from a different department INTO this one.
        SUM(CASE WHEN MSB.dept_cd <> XVER.dept_cd THEN 1 ELSE 0 END) OVER (PARTITION BY XVER.dept_cd) AS dept_btoa_count,
        MIN(CASE WHEN MSB.dept_cd <> XVER.dept_cd THEN XVER.dept_vers_num ELSE NULL END) OVER (PARTITION BY XVER.dept_cd) AS dept_btoa_min,
        -- AtoB (Moved Out Of): Count of styles that moved OUT OF this department into another one.
        SUM(CASE WHEN MSB.dept_cd <> XVER.dept_cd THEN 1 ELSE 0 END) OVER (PARTITION BY MSB.dept_cd) AS dept_atob_count,
        MIN(CASE WHEN MSB.dept_cd <> XVER.dept_cd THEN MSB.styl_sbclass_vers_num ELSE NULL END) OVER (PARTITION BY MSB.dept_cd) AS dept_atob_min,
        -- AmB (A minus B): Styles that existed in the original set but not the current one (for this dept).
        SUM(CASE WHEN MSB.dept_cd IS NULL THEN 1 ELSE 0 END) OVER (PARTITION BY XVER.dept_cd) AS dept_amb_count,
        MIN(XVER.dept_vers_num) OVER (PARTITION BY XVER.dept_cd) AS dept_amb_min,
        -- BmA (B minus A): Styles that are new in the current set (for this dept).
        SUM(CASE WHEN XVER.dept_cd IS NULL THEN 1 ELSE 0 END) OVER (PARTITION BY MSB.dept_cd) AS dept_bma_count,
        MIN(MSB.styl_sbclass_vers_num) OVER (PARTITION BY MSB.dept_cd) AS dept_bma_min,
        -- Logic to determine the new department version number based on the set analysis.
        CASE
            WHEN dept_anb_count = 0 AND dept_btoa_count = 0 AND dept_atob_count = 0 AND dept_amb_count = 0 AND dept_bma_count > 0 THEN dept_bma_min
            ELSE -1
        END AS new_dept_vers_num,
        -- SUBCLASS CHANGE ANALYSIS (Same logic as department analysis) --
        -- AnB (Intersection)
        SUM(CASE WHEN MSB.item_sbclas_cd = XVER.item_sbclas_cd THEN 1 ELSE 0 END) OVER (PARTITION BY MSB.item_sbclas_cd) AS sbclas_anb_count,
        MIN(CASE WHEN MSB.item_sbclas_cd = XVER.item_sbclas_cd THEN XVER.item_sbclas_vers_num ELSE NULL END) OVER (PARTITION BY MSB.item_sbclas_cd) AS sbclas_anb_min,
        -- BtoA (Moved Into)
        SUM(CASE WHEN MSB.item_sbclas_cd <> XVER.item_sbclas_cd THEN 1 ELSE 0 END) OVER (PARTITION BY XVER.item_sbclas_cd) AS sbclas_btoa_count,
        MIN(CASE WHEN MSB.item_sbclas_cd <> XVER.item_sbclas_cd THEN XVER.item_sbclas_vers_num ELSE NULL END) OVER (PARTITION BY XVER.item_sbclas_cd) AS sbclas_btoa_min,
        -- AtoB (Moved Out Of)
        SUM(CASE WHEN MSB.item_sbclas_cd <> XVER.item_sbclas_cd THEN 1 ELSE 0 END) OVER (PARTITION BY MSB.item_sbclas_cd) AS sbclas_atob_count,
        MIN(CASE WHEN MSB.item_sbclas_cd <> XVER.item_sbclas_cd THEN MSB.styl_sbclass_vers_num ELSE NULL END) OVER (PARTITION BY MSB.item_sbclas_cd) AS sbclas_atob_min,
        -- AmB (A minus B)
        SUM(CASE WHEN MSB.item_sbclas_cd IS NULL THEN 1 ELSE 0 END) OVER (PARTITION BY XVER.item_sbclas_cd) AS sbclas_amb_count,
        MIN(XVER.item_sbclas_vers_num) OVER (PARTITION BY XVER.item_sbclas_cd) AS sbclas_amb_min,
        -- BmA (B minus A)
        SUM(CASE WHEN XVER.item_sbclas_cd IS NULL THEN 1 ELSE 0 END) OVER (PARTITION BY MSB.item_sbclas_cd) AS sbclas_bma_count,
        MIN(MSB.styl_sbclass_vers_num) OVER (PARTITION BY MSB.item_sbclas_cd) AS sbclas_bma_min,
        -- Logic to determine the new subclass version number.
        CASE
            WHEN sbclas_anb_count = 0 AND sbclas_btoa_count = 0 AND sbclas_atob_count = 0 AND sbclas_amb_count = 0 AND sbclas_bma_count > 0 THEN sbclas_bma_min
            ELSE -1
        END AS new_sbclas_vers_num
    FROM
        MHR_STYL_BASE AS MSB -- This is Set B (Current)
        FULL OUTER JOIN XVER ON MSB.styl_wid = XVER.styl_wid -- This join creates the Union of A and B
)
-- Final Select: Constructs the final output record.
SELECT
    PMK_CO_REF.styl_wid,
    PMK_CO_REF.item_sbclas_wid,
    -1 AS styl_sbclas_vers_num, -- Placeholder value
    PMK_CO_REF.pmk_co_cd,
    -1 AS pmk_co_vers_num, -- Placeholder value
    PMK_CO_REF.dvisn_cd,
    -1 AS dvisn_vers_num, -- Placeholder value
    PMK_CO_REF.dept_cd,
    PMK_CO_REF.new_dept_vers_num AS dept_vers_num, -- Use the calculated version number
    PMK_CO_REF.item_clas_cd,
    -1 AS item_clas_vers_num, -- Placeholder value
    PMK_CO_REF.pmk_item_sbclas_grp_cd,
    -1 AS pmk_item_sbclas_grp_vers_num, -- Placeholder value
    PMK_CO_REF.item_sbclas_cd,
    PMK_CO_REF.new_sbclas_vers_num AS item_sbclas_vers_num -- Use the calculated version number
FROM
    PMK_CO_REF
;
.IF ERRORCODE <> 0 THEN .QUIT 101


/* End of step */